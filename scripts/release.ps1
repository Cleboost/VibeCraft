# Script de release pour VibeCraft (PowerShell)
param(
    [Parameter(Mandatory=$true)]
    [string]$Version
)

# Fonction d'aide
function Show-Usage {
    Write-Host "Usage: .\release.ps1 <version>" -ForegroundColor Red
    Write-Host "Exemple: .\release.ps1 1.0.1" -ForegroundColor Yellow
    exit 1
}

# Validation du format de version
if (-not ($Version -match '^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$')) {
    Write-Host "Erreur: Format de version invalide. Utilisez le format: 1.0.0" -ForegroundColor Red
    exit 1
}

$TagVersion = "v$Version"

Write-Host "üöÄ D√©but du processus de release pour la version $Version" -ForegroundColor Yellow

# V√©rifier que nous sommes sur la branche main
$CurrentBranch = git branch --show-current
if ($CurrentBranch -ne "main") {
    Write-Host "Erreur: Vous devez √™tre sur la branche main" -ForegroundColor Red
    exit 1
}

# V√©rifier qu'il n'y a pas de changements non commit√©s
$GitStatus = git status --porcelain
if ($GitStatus) {
    Write-Host "Erreur: Il y a des changements non commit√©s" -ForegroundColor Red
    git status --short
    exit 1
}

# V√©rifier que le tag n'existe pas d√©j√†
$ExistingTag = git tag --list | Where-Object { $_ -eq $TagVersion }
if ($ExistingTag) {
    Write-Host "Erreur: Le tag $TagVersion existe d√©j√†" -ForegroundColor Red
    exit 1
}

# Mettre √† jour les versions
Write-Host "üìù Mise √† jour des fichiers de version..." -ForegroundColor Yellow
if (Test-Path "scripts\update-version.js") {
    node scripts\update-version.js $Version
    if ($LASTEXITCODE -ne 0) {
        Write-Host "Erreur: √âchec de la mise √† jour des versions" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "Erreur: Le script update-version.js est introuvable" -ForegroundColor Red
    exit 1
}

# Tester que l'application compile
Write-Host "üî® Test de compilation..." -ForegroundColor Yellow
go build -o "$env:TEMP\vibecraft-test.exe" .
if ($LASTEXITCODE -ne 0) {
    Write-Host "Erreur: La compilation a √©chou√©" -ForegroundColor Red
    exit 1
}
Remove-Item "$env:TEMP\vibecraft-test.exe" -ErrorAction SilentlyContinue

# Commit des changements
Write-Host "üì§ Commit des changements..." -ForegroundColor Yellow
git add .
git commit -m "Bump version to $TagVersion"
if ($LASTEXITCODE -ne 0) {
    Write-Host "Erreur: √âchec du commit" -ForegroundColor Red
    exit 1
}

# Cr√©er le tag
Write-Host "üè∑Ô∏è Cr√©ation du tag $TagVersion..." -ForegroundColor Yellow
git tag -a $TagVersion -m "Release $TagVersion"
if ($LASTEXITCODE -ne 0) {
    Write-Host "Erreur: √âchec de la cr√©ation du tag" -ForegroundColor Red
    exit 1
}

# Push vers GitHub
Write-Host "‚¨ÜÔ∏è Push vers GitHub..." -ForegroundColor Yellow
git push origin main
if ($LASTEXITCODE -ne 0) {
    Write-Host "Erreur: √âchec du push de la branche main" -ForegroundColor Red
    exit 1
}

git push origin $TagVersion
if ($LASTEXITCODE -ne 0) {
    Write-Host "Erreur: √âchec du push du tag" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Release $TagVersion cr√©√©e avec succ√®s !" -ForegroundColor Green
Write-Host "üì¶ L'action GitHub va maintenant builder et publier la release automatiquement" -ForegroundColor Green

# Essayer d'obtenir l'URL du repository
try {
    $RemoteUrl = git remote get-url origin
    $RepoPath = $RemoteUrl -replace '.*github\.com[:/]([^.]*)(\.git)?.*', '$1'
    Write-Host "üîó Surveillez: https://github.com/$RepoPath/actions" -ForegroundColor Green
}
catch {
    Write-Host "üîó Surveillez vos actions GitHub pour le progress du build" -ForegroundColor Green
}